"use client"

import React from "react"
import { useSearchParams, useRouter, usePathname } from "next/navigation"
import LiveCodeWorkbench, { type LiveCodeWorkbenchHandle } from "@/app/ai-agents/components/LiveCodeWorkbench"
import type { AIProvider } from "@/lib/ai-providers"
import { computeKey, upsertProject, getProjectByKey, getRecentProjects, clearRecentProjects, type BuilderProject } from "@/lib/services/builder-projects"

function parseCsv(param: string | null): string[] {
  if (!param) return []
  return param.split(",").map((s) => s.trim()).filter(Boolean)
}

function buildTemplate(query: string, make: string[], want?: string, use?: string[]): { html: string; css: string; title: string } {
  const title = query || "Project"
  if (make.includes("ppt_presentation")) {
    const html = `
<section class="slide cover">
  <h1>${title}</h1>
  <p class="subtitle">Generated by ThesisFlow-AI</p>
</section>
<section class="slide">
  <h2>Outline</h2>
  <ul>
    ${(use && use.length) ? use.map((u) => `<li>Use: ${u.replace(/_/g, " ")}</li>`).join("") : "<li>Overview</li>"}
  </ul>
</section>
<section class="slide">
  <h2>Background</h2>
  <p>Summarize key context and prior work.</p>
</section>
<section class="slide">
  <h2>Findings</h2>
  <ul>
    <li>Point 1</li>
    <li>Point 2</li>
    <li>Point 3</li>
  </ul>
</section>
<section class="slide">
  <h2>Conclusion</h2>
  <p>Wrap-up and next steps.</p>
</section>`
    const css = `
:root { --brand: #ee691a; }
body { margin:0; font-family: Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; color:#111; }
.slide { box-sizing:border-box; width:100vw; height:100vh; padding:64px; display:flex; flex-direction:column; justify-content:center; gap:16px; }
.slide h1 { font-size:56px; margin:0; color:#111 }
.slide h2 { font-size:32px; margin:0 0 8px; color:#111 }
.subtitle { color:#555 }
.cover { background: linear-gradient(135deg, #fff 0%, #fff6f0 50%, #fff 100%); border-left: 12px solid var(--brand); }
ul { margin:0; padding-left: 20px; }
li { line-height: 1.8; }
@media print { .slide { page-break-after: always; } }
`
    return { html, css, title: `${title} — Slides` }
  }

  if (make.includes("website")) {
    const html = `
<header class="hero">
  <h1>${title}</h1>
  <p>${want ? `I want to: ${want.replace(/_/g, " ")}` : "A simple site generated by ThesisFlow-AI"}</p>
  <a class="cta" href="#section">Get Started</a>
</header>
<section id="section" class="section">
  <h2>Overview</h2>
  <p>Describe the purpose, audience, and main features.</p>
</section>
<footer class="footer">© ${new Date().getFullYear()} ThesisFlow-AI</footer>`
    const css = `
:root { --brand: #ee691a; }
* { box-sizing: border-box; }
body { margin:0; font-family: Inter, ui-sans-serif, system-ui; color:#111 }
.hero { padding:96px 24px; text-align:center; background:linear-gradient(180deg,#fff,#fff7f0); border-bottom:1px solid #eee }
.hero h1 { font-size:48px; margin:0 0 12px }
.hero p { color:#555; margin:0 0 16px }
.cta { display:inline-block; background:var(--brand); color:#fff; padding:10px 16px; border-radius:8px; text-decoration:none }
.section { padding:48px 24px; max-width:960px; margin:0 auto }
.footer { padding:24px; text-align:center; color:#666; border-top:1px solid #eee }
`
    return { html, css, title: `${title} — Website` }
  }

  if (make.includes("data_visualisation")) {
    const html = `
<section class="container">
  <h1>${title}</h1>
  <p>Data visualization placeholder. Replace with charts or figures.</p>
  <div class="viz" aria-label="chart area">
    <div class="bar" style="height:60%"></div>
    <div class="bar" style="height:35%"></div>
    <div class="bar" style="height:80%"></div>
    <div class="bar" style="height:45%"></div>
  </div>
</section>`
    const css = `
:root { --brand: #ee691a; }
body { margin:0; font-family: Inter, ui-sans-serif, system-ui; color:#111 }
.container { max-width:960px; margin:24px auto; padding:0 16px }
.viz { display:flex; align-items:flex-end; gap:12px; height:320px; border:1px dashed #ddd; padding:16px; border-radius:8px }
.bar { width:60px; background:linear-gradient(180deg, var(--brand), #ff9a60); border-radius:6px }
`
    return { html, css, title: `${title} — Visualization` }
  }

  // Default minimal template
  return {
    html: `<main style="padding:24px"><h1>${title}</h1><p>Start building your output.</p></main>`,
    css: `body{font-family:Inter,ui-sans-serif,system-ui;margin:0;color:#111}`,
    title: `${title} — Builder`
  }
}

function buildPrompt({ query, make, want, use }: { query: string; make: string[]; want?: string; use?: string[] }) {
  const goal = want ? `I want to: ${want.replace(/_/g, " ")}.` : ""
  const useStr = use && use.length ? `Use sources/tools: ${use.map((u) => u.replace(/_/g, " ")).join(", ")}.` : ""
  const output = make.includes("ppt_presentation")
    ? "Create a clean HTML/CSS slide deck. Use <section class=\"slide\"> per slide. No JS."
    : make.includes("website")
    ? "Create a simple responsive landing page in HTML/CSS."
    : make.includes("data_visualisation")
    ? "Create a simple HTML/CSS visualization placeholder (bars/boxes) without JS."
    : "Create a minimal HTML page with matching CSS."

  return `You are a front-end generator. Generate ONLY a JSON object with keys \"html\" and \"css\".
Topic: ${query}
${goal}
${useStr}
${output}
Constraints:
- Do NOT include script tags or external resources.
- CSS must be self-contained.
- Use brand color #ee691a for accents.
- Keep it accessible and semantic.
Return format (strict JSON): {"html":"...","css":"..."}`
}

function tryParseContentToTemplate(content: string): { html?: string; css?: string } {
  // Try strict JSON first
  try {
    const obj = JSON.parse(content)
    if (obj && typeof obj.html === "string" && typeof obj.css === "string") return obj
  } catch {}
  // Try code fences
  const htmlMatch = content.match(/```html\n([\s\S]*?)```/i)
  const cssMatch = content.match(/```css\n([\s\S]*?)```/i)
  if (htmlMatch || cssMatch) {
    return { html: htmlMatch?.[1]?.trim(), css: cssMatch?.[1]?.trim() }
  }
  // Try extracting <style> from a full HTML doc
  const styleMatch = content.match(/<style[^>]*>([\s\S]*?)<\/style>/i)
  const bodyMatch = content.match(/<body[^>]*>([\s\S]*?)<\/body>/i)
  if (styleMatch || bodyMatch) {
    return { html: (bodyMatch?.[1] || content).trim(), css: styleMatch?.[1]?.trim() }
  }
  return {}
}

export default function BuilderPage() {
  const sp = useSearchParams()
  const router = useRouter()
  const pathname = usePathname()

  const query = sp.get("query") || ""
  const make = parseCsv(sp.get("make"))
  const want = sp.get("want") || undefined
  const use = parseCsv(sp.get("use"))
  const providerParam = sp.get("provider") || undefined
  const modelParam = sp.get("model") || undefined

  const { html, css, title } = React.useMemo(() => buildTemplate(query, make, want, use), [query, make.join(","), want, use.join(",")])

  const [htmlState, setHtmlState] = React.useState(html)
  const [cssState, setCssState] = React.useState(css)
  const [provider, setProvider] = React.useState<AIProvider | undefined>(providerParam as AIProvider | undefined)
  const [model, setModel] = React.useState<string | undefined>(modelParam || undefined)
  const [providersInfo, setProvidersInfo] = React.useState<{ provider: AIProvider; name: string; models: string[] }[] | null>(null)
  const [loadedFromAutosave, setLoadedFromAutosave] = React.useState<null | string>(null)
  const [recent, setRecent] = React.useState<BuilderProject[]>([])
  const editorRef = React.useRef<LiveCodeWorkbenchHandle | null>(null)
  React.useEffect(() => { setHtmlState(html) }, [html])
  React.useEffect(() => { setCssState(css) }, [css])

  const [loading, setLoading] = React.useState(false)
  const [error, setError] = React.useState<string | null>(null)

  const slideMode = React.useMemo(() => {
    const h = htmlState || ""
    return /class\s*=\s*"[^"]*\bslide\b/i.test(h) || /<section[^>]*class=[^>]*\bslide\b/i.test(h)
  }, [htmlState])

  // Load available providers (if authenticated); fallback gracefully
  React.useEffect(() => {
    let ignore = false
    ;(async () => {
      try {
        // Attach Authorization header using Supabase session if available
        let headers: Record<string, string> = {}
        try {
          const { supabase } = await import("@/integrations/supabase/client")
          const sess = await supabase.auth.getSession()
          const token = sess.data.session?.access_token
          if (token) headers["Authorization"] = `Bearer ${token}`
        } catch {}

        const res = await fetch("/api/ai/providers", { method: "GET", headers })
        if (!res.ok) throw new Error("failed")
        const data = await res.json()
        if (!ignore && data?.providers) {
          setProvidersInfo(data.providers)
          if (!providerParam && data.providers.length > 0) setProvider(data.providers[0].provider)
          if (!modelParam && data.providers.length > 0 && data.providers[0].models?.length > 0) setModel(data.providers[0].models[0])
        }
      } catch {
        setProvidersInfo(null)
      }
    })()
    return () => { ignore = true }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  // Autosave: load from localStorage by key if exists
  React.useEffect(() => {
    const key = computeKey({ query, want, use, make })
    const saved = getProjectByKey(key)
    if (saved) {
      setHtmlState(saved.html)
      setCssState(saved.css)
      setProvider(saved.provider)
      setModel(saved.model)
      setLoadedFromAutosave(new Date(saved.ts).toLocaleString())
    }
    setRecent(getRecentProjects(6))
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  // Autosave on change (debounced)
  React.useEffect(() => {
    const id = setTimeout(() => {
      upsertProject({
        title,
        query,
        want,
        use,
        make,
        provider,
        model,
        html: htmlState,
        css: cssState,
      })
      setRecent(getRecentProjects(6))
    }, 800)
    return () => clearTimeout(id)
  }, [title, query, want, use.join("|"), make.join("|"), provider, model, htmlState, cssState])

  // Persist provider/model in URL for shareability
  React.useEffect(() => {
    const params = new URLSearchParams(sp.toString())
    if (provider) params.set("provider", provider)
    else params.delete("provider")
    if (model) params.set("model", model)
    else params.delete("model")
    router.replace(`${pathname}?${params.toString()}`)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [provider, model])

  const generateWithAI = async () => {
    setLoading(true)
    setError(null)
    try {
      const prompt = buildPrompt({ query, make, want, use })
      // Include Supabase access token in Authorization header
      let headers: Record<string, string> = { "Content-Type": "application/json" }
      try {
        const { supabase } = await import("@/integrations/supabase/client")
        const sess = await supabase.auth.getSession()
        const token = sess.data.session?.access_token
        if (token) headers["Authorization"] = `Bearer ${token}`
      } catch {}

      const res = await fetch("/api/ai/generate", {
        method: "POST",
        headers,
        body: JSON.stringify({ prompt, maxTokens: 1500, temperature: 0.4, provider, model }),
      })
      if (res.status === 401) {
        setError("Please sign in to use AI generation.")
        return
      }
      const data = await res.json()
      if (!data.success) {
        throw new Error(data.error || "Generation failed")
      }
      const content: string = data.content || data.response || ""
      const parsed = tryParseContentToTemplate(content)
      if (parsed.html) setHtmlState(parsed.html)
      if (parsed.css) setCssState(parsed.css)
      if (!parsed.html && !parsed.css) {
        // Fallback: treat content as html
        setHtmlState(content)
      }
    } catch (e: any) {
      setError(e?.message || "Something went wrong")
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="flex min-h-screen flex-col">
      {/* Removed duplicate header for a cleaner, single-toolbar layout. Show autosave hint inline above editor if present. */}
      {loadedFromAutosave && (
        <div className="mx-auto w-full max-w-6xl px-4 pt-3">
          <div className="text-xs text-gray-500">Loaded autosave • {loadedFromAutosave}</div>
        </div>
      )}

      {/* Recent projects quick list */}
      {recent.length > 0 && (
        <div className="mx-auto mt-3 w-full max-w-6xl px-4">
          <div className="mb-1 flex items-center justify-between">
            <div className="text-xs font-semibold uppercase tracking-wide text-gray-500">Recent projects</div>
            <button onClick={() => { try { clearRecentProjects() } catch {}; setRecent([]) }} className="text-[11px] text-gray-500 hover:text-gray-700" title="Clear recent projects">Clear</button>
          </div>
          <div className="flex flex-wrap gap-2">
            {recent.map((p) => (
              <button key={p.id} onClick={() => { setHtmlState(p.html); setCssState(p.css); setProvider(p.provider); setModel(p.model); }} className="truncate rounded-md border border-gray-200 bg-white px-2 py-1 text-xs text-gray-700 hover:bg-gray-50" title={`${p.title} • ${new Date(p.ts).toLocaleString()}`}>{p.title}</button>
            ))}
          </div>
        </div>
      )}

      <LiveCodeWorkbench
        ref={editorRef}
        initialHtml={html}
        initialCss={css}
        title={title}
        html={htmlState}
        css={cssState}
        onChangeHtml={setHtmlState}
        onChangeCss={setCssState}
        toolbarRight={
          <div className="flex items-center gap-2">
            {error && <span className="text-sm text-red-600">{error}</span>}
            <div className="hidden md:flex items-center gap-2">
              <select value={provider || ""} onChange={(e) => setProvider((e.target.value || undefined) as AIProvider)} className="rounded-md border border-gray-200 bg-white px-2 py-1.5 text-xs text-gray-800">
                <option value="">Provider</option>
                {providersInfo?.map((p) => (
                  <option key={p.provider} value={p.provider}>{p.name}</option>
                ))}
              </select>
              <select value={model || ""} onChange={(e) => setModel(e.target.value || undefined)} className="rounded-md border border-gray-200 bg-white px-2 py-1.5 text-xs text-gray-800">
                <option value="">Model</option>
                {(providersInfo?.find((p) => p.provider === provider)?.models || []).map((m) => (
                  <option key={m} value={m}>{m}</option>
                ))}
              </select>
            </div>
            <button disabled={loading} onClick={generateWithAI} className="rounded-md bg-orange-500 px-3 py-1.5 text-sm font-medium text-white hover:bg-orange-600 disabled:opacity-60">{loading ? "Generating..." : "Generate with AI"}</button>
            <button onClick={() => router.push("/ai-agents")} className="rounded-md border border-gray-200 bg-white px-3 py-1.5 text-sm text-gray-700 hover:bg-gray-50">Back</button>
          </div>
        }
      />
    </div>
  )
}
