# Cloud Build config for building and deploying Next.js app with WebSocket support to Cloud Run
# Substitutions you can override per-trigger:
# _SERVICE: Cloud Run service name
# _REGION: Cloud Run region (e.g., us-central1)
# _REPO: Artifact Registry repo (format: LOCATION-docker.pkg.dev/PROJECT/REPO)
# _IMAGE: Image name (defaults to $_REPO/thesisflow-ai)

substitutions:
  _SERVICE: thesisflow
  _REGION: us-central1
  _REPO: us-central1-docker.pkg.dev/$PROJECT_ID/thesisflow
  _IMAGE: $_REPO/thesisflow-ai

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8

steps:
  # Build and push container image
  - name: gcr.io/cloud-builders/docker
    id: build-image
    args:
      - build
      - -t
      - $_IMAGE:$SHORT_SHA
      - -t
      - $_IMAGE:latest
      - .

  - name: gcr.io/cloud-builders/docker
    id: push-image
    args:
      - push
      - --all-tags
      - $_IMAGE

  # Deploy Next.js + WebSocket service to Cloud Run
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: deploy-cloud-run
    entrypoint: gcloud
    args:
      - run
      - deploy
      - $_SERVICE
      - --image
      - $_IMAGE:$SHORT_SHA
      - --region
      - $_REGION
      - --platform
      - managed
      - --allow-unauthenticated
      - --port
      - "8080"
      - --max-instances
      - "10"
      - --cpu
      - "2"
      - --memory
      - "2Gi"
      - --timeout
      - "3600"
      - --concurrency
      - "80"
      - --execution-environment
      - gen2
      - --set-env-vars
      - NEXT_TELEMETRY_DISABLED=1,NODE_ENV=production,NEXTJS_PORT=3000,WS_PORT=3001
      - --update-env-vars
      - NEXT_PUBLIC_APP_URL=https://$_SERVICE-$_REGION.a.run.app
      - --update-env-vars  
      - NEXT_PUBLIC_WS_URL=wss://$_SERVICE-$_REGION.a.run.app

images:
  - $_IMAGE:$SHORT_SHA
  - $_IMAGE:latest

# Note: Cloud Run services can only expose one port externally (8080)
# WebSocket connections will need to connect through the same domain/port
# The PM2 setup runs both Next.js (8080) and WebSocket (8081) internally
# Consider using a reverse proxy or WebSocket upgrade on the same port for production
